roc.train <- pROC::roc(df.train$left, df.train$predicted_prob_1)
roc.test1 <- pROC::roc(df.test$left, df.test$predicted_prob_1)
pROC::plot.roc(roc.train, col = "BLUE")
pROC::plot.roc(roc.test1, add = TRUE, col = "GREEN")
#Feature selection in Random Forest (Recursive Feature Eliminaion)
set.seed(123457)
train_index <- caret::createDataPartition(df$department, p = 0.7, list = FALSE)
df.train <- df[train_index,]
df.test <- df[-train_index,]
control <- caret::rfeControl(functions = rfFuncs, method = "cv", number = 10)
results <- caret::rfe(df.train[,-(which(colnames(df.train) == "left"))], df.train$left, sizes = c(1:9), rfeControl = control, verbose = TRUE)
print(results)
ggplot(data = results) + geom_line()
vars.imp <- randomForest::importance(results$fit)
print(vars.imp)
imp <- setDT(data.frame(vars.imp), keep.rownames = TRUE)
colnames(imp) <- c("Feature", "Mean_Decrease_Gini")
imp <- imp[order(imp$Mean_Decrease_Gini, decreasing = TRUE),]
print(imp)
ggplot(data = imp, mapping = aes(x = Mean_Decrease_Gini, y = reorder(Feature, Mean_Decrease_Gini))) + geom_point()
model.rf <- randomForest::randomForest(left ~ satisfaction_level + number_project + average_montly_hours + time_spend_company
+ last_evaluation + department, data = df.train, verbose = TRUE)
df.train$predicted_outcome <- predict(model.rf, newdata = df.train)
df.test$predicted_outcome <- predict(model.rf, newdata = df.test)
prob <- predict(model.rf, newdata = df.train, type = "prob")
df.train$predicted_prob_0 <- prob[,1]
df.train$predicted_prob_1 <- prob[,2]
df.train$predicted_outcome <- predict(model.rf, newdata = df.train, type = "response")
df.test$predicted_outcome <- predict(model.rf, newdata = df.test, type = "response")
#Feature selection in Random Forest (Recursive Feature Eliminaion)
set.seed(123457)
train_index <- caret::createDataPartition(df$department, p = 0.7, list = FALSE)
df.train <- df[train_index,]
df.test <- df[-train_index,]
control <- caret::rfeControl(functions = rfFuncs, method = "cv", number = 10)
results <- caret::rfe(df.train[,-(which(colnames(df.train) == "left"))], df.train$left, sizes = c(1:9), rfeControl = control, verbose = TRUE)
print(results)
ggplot(data = results) + geom_line()
vars.imp <- randomForest::importance(results$fit)
print(vars.imp)
imp <- setDT(data.frame(vars.imp), keep.rownames = TRUE)
colnames(imp) <- c("Feature", "Mean_Decrease_Gini")
imp <- imp[order(imp$Mean_Decrease_Gini, decreasing = TRUE),]
print(imp)
ggplot(data = imp, mapping = aes(x = Mean_Decrease_Gini, y = reorder(Feature, Mean_Decrease_Gini))) + geom_point()
model.rf <- randomForest::randomForest(left ~ satisfaction_level + number_project + average_montly_hours + time_spend_company
+ last_evaluation + department, data = df.train, verbose = TRUE)
df.train$predicted_outcome <- predict(model.rf, newdata = df.train, type = "response")
df.test$predicted_outcome <- predict(model.rf, newdata = df.test, type = "response")
prob <- predict(model.rf, newdata = df.train, type = "prob")
df.train$predicted_prob_0 <- prob[,1]
df.train$predicted_prob_1 <- prob[,2]
prob <- predict(model.rf, newdata = df.test, type = "prob")
df.test$predicted_prob_0 <- prob[,1]
df.test$predicted_prob_1 <- prob[,2]
#Confusion matrices
conf.matrix.train <- caret::confusionMatrix(df.train$predicted_outcome, df.train$left)
conf.matrix.train
conf.matrix.test <- caret::confusionMatrix(df.test$predicted_outcome, df.test$left)
conf.matrix.test
#ROC curve with feature selected predictors
roc.train <- pROC::roc(df.train$left, df.train$predicted_prob_1)
roc.test1 <- pROC::roc(df.test$left, df.test$predicted_prob_1)
pROC::plot.roc(roc.train, col = "BLUE")
pROC::plot.roc(roc.test1, add = TRUE, col = "GREEN")
rm(list = ls())
library(caret)
library(ggplot2)
library(dummies)
library(pROC)
library(randomForest)
library(data.table)
#Importing dataset
df <- read.csv("HR_data.csv", header = TRUE)
#Renaming columns and cleaning the dataset
colnames(df)[colnames(df) == "sales"] <- "department"
#Creating factors and partitions
df$department <- as.factor(df$department)
df$salary <- as.factor(df$salary)
df$left <- as.factor(df$left)
set.seed(123457)
train_index <- caret::createDataPartition(df$department, p = 0.7, list = FALSE)
df.train <- df[train_index,]
df.test <- df[-train_index,]
model.rf <- randomForest::randomForest(left ~ satisfaction_level, data = df.train, verbose = TRUE)
df.train$predicted_outcome <- predict(model.rf, newdata = df.train, type = "response")
prob <- predict(model.rf, newdata = df.train, type = "prob")
df.train$predicted_prob_0 <- prob[,1]
df.train$predicted_prob_1 <- prob[,2]
df.test$predicted_outcome <- predict(model.rf, newdata = df.test, type = "response")
prob <- predict(model.rf, newdata = df.test, type = "prob")
df.test$predicted_prob_0 <- prob[,1]
df.test$predicted_prob_1 <- prob[,2]
#Confusion matrices
conf.matrix.train <- caret::confusionMatrix(df.train$predicted_outcome, df.train$left)
conf.matrix.train
conf.matrix.test <- caret::confusionMatrix(df.test$predicted_outcome, df.test$left)
conf.matrix.test
#ROC curve with all pedictors
roc.train <- pROC::roc(df.train$left, df.train$predicted_prob_1)
roc.test1 <- pROC::roc(df.test$left, df.test$predicted_prob_1)
pROC::plot.roc(roc.train, col = "BLUE")
pROC::plot.roc(roc.test1, add = TRUE, col = "GREEN")
View(df.test)
library(caret)
library(ggplot2)
library(dummies)
library(pROC)
library(randomForest)
library(data.table)
#Importing dataset
df <- read.csv("HR_data.csv", header = TRUE)
#Renaming columns and cleaning the dataset
colnames(df)[colnames(df) == "sales"] <- "department"
#Creating factors and partitions
df$department <- as.factor(df$department)
df$salary <- as.factor(df$salary)
df$left <- as.factor(df$left)
set.seed(123457)
train_index <- caret::createDataPartition(df$department, p = 0.7, list = FALSE)
df.train <- df[train_index,]
df.test <- df[-train_index,]
model.rf <- randomForest::randomForest(left ~ department, data = df.train, verbose = TRUE)
df.train$predicted_outcome <- predict(model.rf, newdata = df.train, type = "response")
prob <- predict(model.rf, newdata = df.train, type = "prob")
df.train$predicted_prob_0 <- prob[,1]
df.train$predicted_prob_1 <- prob[,2]
df.test$predicted_outcome <- predict(model.rf, newdata = df.test, type = "response")
prob <- predict(model.rf, newdata = df.test, type = "prob")
df.test$predicted_prob_0 <- prob[,1]
df.test$predicted_prob_1 <- prob[,2]
#Confusion matrices
conf.matrix.train <- caret::confusionMatrix(df.train$predicted_outcome, df.train$left)
conf.matrix.train
conf.matrix.test <- caret::confusionMatrix(df.test$predicted_outcome, df.test$left)
conf.matrix.test
#ROC curve with all pedictors
roc.train <- pROC::roc(df.train$left, df.train$predicted_prob_1)
roc.test1 <- pROC::roc(df.test$left, df.test$predicted_prob_1)
pROC::plot.roc(roc.train, col = "BLUE")
pROC::plot.roc(roc.test1, add = TRUE, col = "GREEN")
library(caret)
library(ggplot2)
library(dummies)
library(pROC)
library(randomForest)
library(data.table)
#Importing dataset
df <- read.csv("HR_data.csv", header = TRUE)
#Renaming columns and cleaning the dataset
colnames(df)[colnames(df) == "sales"] <- "department"
#Creating factors and partitions
df$department <- as.factor(df$department)
df$salary <- as.factor(df$salary)
df$left <- as.factor(df$left)
set.seed(123457)
train_index <- caret::createDataPartition(df$department, p = 0.7, list = FALSE)
df.train <- df[train_index,]
df.test <- df[-train_index,]
model.rf <- randomForest::randomForest(left ~ time_spend_company + department, data = df.train, verbose = TRUE)
df.train$predicted_outcome <- predict(model.rf, newdata = df.train, type = "response")
prob <- predict(model.rf, newdata = df.train, type = "prob")
df.train$predicted_prob_0 <- prob[,1]
df.train$predicted_prob_1 <- prob[,2]
df.test$predicted_outcome <- predict(model.rf, newdata = df.test, type = "response")
prob <- predict(model.rf, newdata = df.test, type = "prob")
df.test$predicted_prob_0 <- prob[,1]
df.test$predicted_prob_1 <- prob[,2]
#Confusion matrices
conf.matrix.train <- caret::confusionMatrix(df.train$predicted_outcome, df.train$left)
conf.matrix.train
conf.matrix.test <- caret::confusionMatrix(df.test$predicted_outcome, df.test$left)
conf.matrix.test
#ROC curve with all pedictors
roc.train <- pROC::roc(df.train$left, df.train$predicted_prob_1)
roc.test1 <- pROC::roc(df.test$left, df.test$predicted_prob_1)
pROC::plot.roc(roc.train, col = "BLUE")
pROC::plot.roc(roc.test1, add = TRUE, col = "GREEN")
library(caret)
library(ggplot2)
library(dummies)
library(pROC)
library(randomForest)
library(data.table)
#Importing dataset
df <- read.csv("HR_data.csv", header = TRUE)
#Renaming columns and cleaning the dataset
colnames(df)[colnames(df) == "sales"] <- "department"
#Creating factors and partitions
df$department <- as.factor(df$department)
df$salary <- as.factor(df$salary)
df$left <- as.factor(df$left)
set.seed(123457)
train_index <- caret::createDataPartition(df$department, p = 0.7, list = FALSE)
df.train <- df[train_index,]
df.test <- df[-train_index,]
model.rf <- randomForest::randomForest(left ~ number_project + average_montly_hours + time_spend_company +
department, data = df.train, verbose = TRUE)
df.train$predicted_outcome <- predict(model.rf, newdata = df.train, type = "response")
prob <- predict(model.rf, newdata = df.train, type = "prob")
df.train$predicted_prob_0 <- prob[,1]
df.train$predicted_prob_1 <- prob[,2]
df.test$predicted_outcome <- predict(model.rf, newdata = df.test, type = "response")
prob <- predict(model.rf, newdata = df.test, type = "prob")
df.test$predicted_prob_0 <- prob[,1]
df.test$predicted_prob_1 <- prob[,2]
#Confusion matrices
conf.matrix.train <- caret::confusionMatrix(df.train$predicted_outcome, df.train$left)
conf.matrix.train
conf.matrix.test <- caret::confusionMatrix(df.test$predicted_outcome, df.test$left)
conf.matrix.test
#ROC curve with all pedictors
roc.train <- pROC::roc(df.train$left, df.train$predicted_prob_1)
roc.test1 <- pROC::roc(df.test$left, df.test$predicted_prob_1)
pROC::plot.roc(roc.train, col = "BLUE")
pROC::plot.roc(roc.test1, add = TRUE, col = "GREEN")
set.seed(123457)
train_index <- caret::createDataPartition(df$department, p = 0.7, list = FALSE)
df.train <- df[train_index,]
df.test <- df[-train_index,]
model.rf <- randomForest::randomForest(left ~ average_montly_hours + time_spend_company +
department, data = df.train, verbose = TRUE)
df.train$predicted_outcome <- predict(model.rf, newdata = df.train, type = "response")
set.seed(123457)
train_index <- caret::createDataPartition(df$department, p = 0.7, list = FALSE)
df.train <- df[train_index,]
df.test <- df[-train_index,]
model.rf <- randomForest::randomForest(left ~ average_montly_hours + time_spend_company +
department, data = df.train, verbose = TRUE)
df.train$predicted_outcome <- predict(model.rf, newdata = df.train, type = "response")
prob <- predict(model.rf, newdata = df.train, type = "prob")
df.train$predicted_prob_0 <- prob[,1]
df.train$predicted_prob_1 <- prob[,2]
df.test$predicted_outcome <- predict(model.rf, newdata = df.test, type = "response")
prob <- predict(model.rf, newdata = df.test, type = "prob")
df.test$predicted_prob_0 <- prob[,1]
df.test$predicted_prob_1 <- prob[,2]
#Confusion matrices
conf.matrix.train <- caret::confusionMatrix(df.train$predicted_outcome, df.train$left)
conf.matrix.train
conf.matrix.test <- caret::confusionMatrix(df.test$predicted_outcome, df.test$left)
conf.matrix.test
#ROC curve with all pedictors
roc.train <- pROC::roc(df.train$left, df.train$predicted_prob_1)
roc.test1 <- pROC::roc(df.test$left, df.test$predicted_prob_1)
pROC::plot.roc(roc.train, col = "BLUE")
pROC::plot.roc(roc.test1, add = TRUE, col = "GREEN")
set.seed(123457)
train_index <- caret::createDataPartition(df$department, p = 0.5, list = FALSE)
df.train <- df[train_index,]
df.test <- df[-train_index,]
model.rf <- randomForest::randomForest(left ~ average_montly_hours + time_spend_company +
department, data = df.train, verbose = TRUE)
df.train$predicted_outcome <- predict(model.rf, newdata = df.train, type = "response")
prob <- predict(model.rf, newdata = df.train, type = "prob")
df.train$predicted_prob_0 <- prob[,1]
df.train$predicted_prob_1 <- prob[,2]
df.test$predicted_outcome <- predict(model.rf, newdata = df.test, type = "response")
prob <- predict(model.rf, newdata = df.test, type = "prob")
df.test$predicted_prob_0 <- prob[,1]
df.test$predicted_prob_1 <- prob[,2]
#Confusion matrices
conf.matrix.train <- caret::confusionMatrix(df.train$predicted_outcome, df.train$left)
conf.matrix.train
conf.matrix.test <- caret::confusionMatrix(df.test$predicted_outcome, df.test$left)
conf.matrix.test
#ROC curve with all pedictors
roc.train <- pROC::roc(df.train$left, df.train$predicted_prob_1)
roc.test1 <- pROC::roc(df.test$left, df.test$predicted_prob_1)
pROC::plot.roc(roc.train, col = "BLUE")
pROC::plot.roc(roc.test1, add = TRUE, col = "GREEN")
set.seed(123457)
train_index <- caret::createDataPartition(df$department, p = 0.3, list = FALSE)
df.train <- df[train_index,]
df.test <- df[-train_index,]
model.rf <- randomForest::randomForest(left ~ average_montly_hours + time_spend_company +
department, data = df.train, verbose = TRUE)
df.train$predicted_outcome <- predict(model.rf, newdata = df.train, type = "response")
prob <- predict(model.rf, newdata = df.train, type = "prob")
df.train$predicted_prob_0 <- prob[,1]
df.train$predicted_prob_1 <- prob[,2]
df.test$predicted_outcome <- predict(model.rf, newdata = df.test, type = "response")
prob <- predict(model.rf, newdata = df.test, type = "prob")
df.test$predicted_prob_0 <- prob[,1]
df.test$predicted_prob_1 <- prob[,2]
#Confusion matrices
conf.matrix.train <- caret::confusionMatrix(df.train$predicted_outcome, df.train$left)
conf.matrix.train
conf.matrix.test <- caret::confusionMatrix(df.test$predicted_outcome, df.test$left)
conf.matrix.test
#ROC curve with all pedictors
roc.train <- pROC::roc(df.train$left, df.train$predicted_prob_1)
roc.test1 <- pROC::roc(df.test$left, df.test$predicted_prob_1)
pROC::plot.roc(roc.train, col = "BLUE")
pROC::plot.roc(roc.test1, add = TRUE, col = "GREEN")
View(df.test)
summary(df.test)
rm(list = ls())
library(caret)
library(ggplot2)
library(dummies)
library(pROC)
library(randomForest)
library(data.table)
#Importing dataset
df <- read.csv("HR_data.csv", header = TRUE)
#Renaming columns and cleaning the dataset
colnames(df)[colnames(df) == "sales"] <- "department"
#Creating factors and partitions
df$department <- as.factor(df$department)
df$salary <- as.factor(df$salary)
df$left <- as.factor(df$left)
set.seed(123457)
train_index <- caret::createDataPartition(df$department, p = 0.3, list = FALSE)
df.train <- df[train_index,]
df.test <- df[-train_index,]
model.rf <- randomForest::randomForest(left ~ satisfaction_level + number_project + average_montly_hours + time_spend_company
+ last_evaluation + department, data = df.train, verbose = TRUE)
df.train$predicted_outcome <- predict(model.rf, newdata = df.train, type = "response")
prob <- predict(model.rf, newdata = df.train, type = "prob")
df.train$predicted_prob_0 <- prob[,1]
df.train$predicted_prob_1 <- prob[,2]
df.test$predicted_outcome <- predict(model.rf, newdata = df.test, type = "response")
prob <- predict(model.rf, newdata = df.test, type = "prob")
df.test$predicted_prob_0 <- prob[,1]
df.test$predicted_prob_1 <- prob[,2]
#Confusion matrices
conf.matrix.train <- caret::confusionMatrix(df.train$predicted_outcome, df.train$left)
conf.matrix.train
conf.matrix.test <- caret::confusionMatrix(df.test$predicted_outcome, df.test$left)
conf.matrix.test
#ROC curve with all pedictors
roc.train <- pROC::roc(df.train$left, df.train$predicted_prob_1)
roc.test1 <- pROC::roc(df.test$left, df.test$predicted_prob_1)
pROC::plot.roc(roc.train, col = "BLUE")
pROC::plot.roc(roc.test1, add = TRUE, col = "GREEN")
library(caret)
library(ggplot2)
library(dummies)
library(pROC)
library(randomForest)
library(data.table)
#Importing dataset
df <- read.csv("HR_data.csv", header = TRUE)
#Renaming columns and cleaning the dataset
colnames(df)[colnames(df) == "sales"] <- "department"
#Creating factors and partitions
df$department <- as.factor(df$department)
df$salary <- as.factor(df$salary)
df$left <- as.factor(df$left)
set.seed(123457)
train_index <- caret::createDataPartition(df$department, p = 0.3, list = FALSE)
df.train <- df[train_index,]
df.test <- df[-train_index,]
model.rf <- randomForest::randomForest(left ~ satisfaction_level + number_project + average_montly_hours + time_spend_company
+ last_evaluation, data = df.train, verbose = TRUE)
df.train$predicted_outcome <- predict(model.rf, newdata = df.train, type = "response")
prob <- predict(model.rf, newdata = df.train, type = "prob")
df.train$predicted_prob_0 <- prob[,1]
df.train$predicted_prob_1 <- prob[,2]
df.test$predicted_outcome <- predict(model.rf, newdata = df.test, type = "response")
prob <- predict(model.rf, newdata = df.test, type = "prob")
df.test$predicted_prob_0 <- prob[,1]
df.test$predicted_prob_1 <- prob[,2]
#Confusion matrices
conf.matrix.train <- caret::confusionMatrix(df.train$predicted_outcome, df.train$left)
conf.matrix.train
conf.matrix.test <- caret::confusionMatrix(df.test$predicted_outcome, df.test$left)
conf.matrix.test
#ROC curve with all pedictors
roc.train <- pROC::roc(df.train$left, df.train$predicted_prob_1)
roc.test1 <- pROC::roc(df.test$left, df.test$predicted_prob_1)
pROC::plot.roc(roc.train, col = "BLUE")
pROC::plot.roc(roc.test1, add = TRUE, col = "GREEN")
summary(model.rf)
library(caret)
library(ggplot2)
library(dummies)
library(pROC)
library(randomForest)
library(data.table)
#Importing dataset
df <- read.csv("HR_data.csv", header = TRUE)
#Renaming columns and cleaning the dataset
colnames(df)[colnames(df) == "sales"] <- "department"
#Creating factors and partitions
df$department <- as.factor(df$department)
df$salary <- as.factor(df$salary)
df$left <- as.factor(df$left)
set.seed(123457)
train_index <- caret::createDataPartition(df$department, p = 0.3, list = FALSE)
df.train <- df[train_index,]
df.test <- df[-train_index,]
model.rf <- randomForest::randomForest(left ~ satisfaction_level + number_project + average_montly_hours
+ time_spend_company, data = df.train, verbose = TRUE)
df.train$predicted_outcome <- predict(model.rf, newdata = df.train, type = "response")
prob <- predict(model.rf, newdata = df.train, type = "prob")
df.train$predicted_prob_0 <- prob[,1]
df.train$predicted_prob_1 <- prob[,2]
df.test$predicted_outcome <- predict(model.rf, newdata = df.test, type = "response")
prob <- predict(model.rf, newdata = df.test, type = "prob")
df.test$predicted_prob_0 <- prob[,1]
df.test$predicted_prob_1 <- prob[,2]
#Confusion matrices
conf.matrix.train <- caret::confusionMatrix(df.train$predicted_outcome, df.train$left)
conf.matrix.train
conf.matrix.test <- caret::confusionMatrix(df.test$predicted_outcome, df.test$left)
conf.matrix.test
library(caret)
library(ggplot2)
library(dummies)
library(pROC)
library(randomForest)
library(data.table)
#Importing dataset
df <- read.csv("HR_data.csv", header = TRUE)
#Renaming columns and cleaning the dataset
colnames(df)[colnames(df) == "sales"] <- "department"
#Creating factors and partitions
df$department <- as.factor(df$department)
df$salary <- as.factor(df$salary)
df$left <- as.factor(df$left)
set.seed(123457)
train_index <- caret::createDataPartition(df$department, p = 0.3, list = FALSE)
df.train <- df[train_index,]
df.test <- df[-train_index,]
model.rf <- randomForest::randomForest(left ~ satisfaction_level + number_project + average_montly_hours
+ time_spend_company + last_evaluation, data = df.train, verbose = TRUE)
df.train$predicted_outcome <- predict(model.rf, newdata = df.train, type = "response")
prob <- predict(model.rf, newdata = df.train, type = "prob")
df.train$predicted_prob_0 <- prob[,1]
df.train$predicted_prob_1 <- prob[,2]
df.test$predicted_outcome <- predict(model.rf, newdata = df.test, type = "response")
prob <- predict(model.rf, newdata = df.test, type = "prob")
df.test$predicted_prob_0 <- prob[,1]
df.test$predicted_prob_1 <- prob[,2]
#Confusion matrices
conf.matrix.train <- caret::confusionMatrix(df.train$predicted_outcome, df.train$left)
conf.matrix.train
conf.matrix.test <- caret::confusionMatrix(df.test$predicted_outcome, df.test$left)
conf.matrix.test
#ROC curve with all pedictors
roc.train <- pROC::roc(df.train$left, df.train$predicted_prob_1)
roc.test1 <- pROC::roc(df.test$left, df.test$predicted_prob_1)
pROC::plot.roc(roc.train, col = "BLUE")
pROC::plot.roc(roc.test1, add = TRUE, col = "GREEN")
rm(list = ls())
library(caret)
library(ggplot2)
library(dummies)
library(pROC)
library(randomForest)
library(data.table)
#Importing dataset
df <- read.csv("HR_data.csv", header = TRUE)
#Renaming columns and cleaning the dataset
colnames(df)[colnames(df) == "sales"] <- "department"
#Creating factors and partitions
df$department <- as.factor(df$department)
df$salary <- as.factor(df$salary)
df$left <- as.factor(df$left)
set.seed(123457)
train_index <- caret::createDataPartition(df$department, p = 0.3, list = FALSE)
df.train <- df[train_index,]
df.test <- df[-train_index,]
#k means clustering
drop.cols <- c("left")
df.train <- dplyr::select(df.train, -one_of(drop.cols))
library(dplyr)
df.train <- dplyr::select(df.train, -one_of(drop.cols))
df.test <- dplyr::select(df.test, -one_of(drop.cols))
library(caret)
library(ggplot2)
library(dummies)
library(pROC)
library(randomForest)
library(data.table)
library(dplyr)
#Importing dataset
df <- read.csv("HR_data.csv", header = TRUE)
#Renaming columns and cleaning the dataset
colnames(df)[colnames(df) == "sales"] <- "department"
#Creating factors and partitions
df$department <- as.factor(df$department)
df$salary <- as.factor(df$salary)
df$left <- as.factor(df$left)
rm(list = ls())
library(caret)
library(ggplot2)
library(dummies)
library(pROC)
library(randomForest)
library(data.table)
library(dplyr)
#Importing dataset
df <- read.csv("HR_data.csv", header = TRUE)
#Renaming columns and cleaning the dataset
colnames(df)[colnames(df) == "sales"] <- "department"
#Creating factors and partitions
df$department <- as.factor(df$department)
df$salary <- as.factor(df$salary)
df$left <- as.factor(df$left)
#k means clustering
set.seed(123457)
drop.cols <- c("left")
df.km <- dplyr::select(df, -one_of(drop.cols))
fit.km <- kmeans(df, 5, nstart = 20)
dum.colnames <- c("department", "salary")
df.km <- dummy.data.frame(data = df.km, names = dum.colnames, sep = "_")
fit.km <- kmeans(df, 5, nstart = 20)
fit.km <- kmeans(df, centers = 5, nstart = 20)
str(df.km)
