install.packages("ggplot2")
install.packages("data.table")
install.packages("dplyr")
install.packages("caret")
install.packages("lattice")
library("lattice", lib.loc="~/R/win-library/3.3")
library("ggplot2", lib.loc="~/R/win-library/3.3")
detach("package:ggplot2", unload=TRUE)
detach("package:lattice", unload=TRUE)
install.packages("stringr")
install.packages("data.table")
install.packages("zoo")
install.packages("data.table")
remove(list = ls())
# Poker and roulette winnings from Monday to Friday:
poker_vector <- c(140, -50, 20, -120, 240)
roulette_vector <- c(-24, -50, 100, -350, 10)
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(poker_vector) <- days_vector
names(roulette_vector) <- days_vector
# Which days did you make money on roulette?
selection_vector <- roulette_vector > 0
roulette_winning_days <- roulette_vector[selection_vector]
total_win_roulette <- sum(roulette_winning_days)
# Which days did you make money on poker?
selection_vector <- poker_vector > 0
poker_winning_days <- poker_vector[selection_vector]
total_win_poker <- sum(poker_winning_days)
#Print results
roulette_winning_days
total_win_roulette
poker_winning_days
total_win_poker
getwd()
rm(list = ls())
install.packages("installr")
library(installr)
updateR()
rm(list = ls())
rm(list = ls())
rm(list = ls())
version
version()
rversion)
rversion()
highlyCorrelated <- caret::findCorrelation(correlationMatrix, cutoff = 0.3)
library(caret)
library(ggplot2)
library(dummies)
#Importing dataset
df <- read.csv("HR_data.csv", header = TRUE)
#Renaming columns and cleaning the dataset
colnames(df)[colnames(df) == "sales"] <- "department"
#Creating factors, sampling and creating dummy variables
df$department <- as.factor(df$department)
df$salary <- as.factor(df$salary)
set.seed(123457)
train_index <- caret::createDataPartition(df$department, p = 0.7, list = FALSE)
df.train <- df[train_index,]
df.test <- df[-train_index,]
dum.colnames <- c("department", "salary")
df.train <- dummy.data.frame(data = df.train, names = dum.colnames, drop = TRUE, sep = "_")
df.test <- dummy.data.frame(data = df.test, names = dum.colnames, drop = TRUE, sep = "_")
#Feature selection
correlationMatrix <- cor(df.train)
highlyCorrelated <- caret::findCorrelation(correlationMatrix, cutoff = 0.3, verbose = TRUE)
rm(list = ls())
library(caret)
library(ggplot2)
library(dummies)
library(pROC)
library(randomForest)
#Importing dataset
df <- read.csv("HR_data.csv", header = TRUE)
#Renaming columns and cleaning the dataset
colnames(df)[colnames(df) == "sales"] <- "department"
#Creating factors and partitions(based on department)
df$department <- as.factor(df$department)
df$salary <- as.factor(df$salary)
df$left <- as.factor(df$left)
set.seed(123457)
library(caret)
library(ggplot2)
library(dummies)
library(pROC)
library(randomForest)
library(Hmisc)
library(data.table)
#Importing dataset
df <- read.csv("HR_data.csv", header = TRUE)
#Renaming columns and cleaning the dataset
colnames(df)[colnames(df) == "sales"] <- "department"
#Creating factors and partitions
df$department <- as.factor(df$department)
df$salary <- as.factor(df$salary)
df$left <- as.factor(df$left)
set.seed(123457)
train_index <- caret::createDataPartition(df$department, p = 0.7, list = FALSE)
df.train <- df[train_index,]
df.test <- df[-train_index,]
setwd("~/GitHub/Employee-attrition-prediction")
library(caret)
library(ggplot2)
library(dummies)
library(pROC)
library(randomForest)
library(Hmisc)
library(data.table)
#Importing dataset
df <- read.csv("HR_data.csv", header = TRUE)
#Renaming columns and cleaning the dataset
colnames(df)[colnames(df) == "sales"] <- "department"
#Creating factors and partitions
df$department <- as.factor(df$department)
df$salary <- as.factor(df$salary)
df$left <- as.factor(df$left)
set.seed(123457)
train_index <- caret::createDataPartition(df$department, p = 0.7, list = FALSE)
df.train <- df[train_index,]
df.test <- df[-train_index,]
#Exploring collinearity
dum.colnames <- c("department", "salary")
df.train <- dummy.data.frame(data = df.train, names = dum.colnames, sep = "_")
df.test <- dummy.data.frame(data = df.test, names = dum.colnames, sep = "_")
cor.matrix <- Hmisc::rcorr(as.matrix(df.train))
print(cor.matrix)
print(cor.matrix)
